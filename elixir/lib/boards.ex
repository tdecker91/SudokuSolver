defmodule Boards do
  @moduledoc """
  sample sudoku boards
  """

  def default_board() do
    empty_row = :array.new(9, default: 0)
    :array.new(9, default: empty_row)
  end

  def easy_board() do
    [
      [0, 2, 0, 6, 0, 9, 0, 3, 8],
      [0, 1, 9, 3, 2, 0, 0, 0, 0],
      [0, 6, 0, 1, 0, 0, 5, 2, 9],
      [0, 0, 0, 0, 4, 0, 8, 1, 6],
      [4, 7, 0, 0, 5, 6, 2, 0, 0],
      [6, 0, 3, 9, 1, 0, 0, 0, 0],
      [1, 9, 5, 0, 6, 8, 0, 0, 0],
      [7, 0, 0, 0, 0, 1, 4, 0, 5],
      [0, 0, 8, 0, 0, 7, 0, 0, 0]
    ]
  end

  def hard_board() do
    [
      [6, 0, 8, 0, 2, 0, 0, 7, 0],
      [0, 4, 0, 0, 0, 0, 0, 8, 0],
      [0, 0, 3, 0, 0, 0, 2, 0, 5],
      [8, 0, 2, 0, 4, 1, 0, 0, 0],
      [0, 6, 4, 2, 0, 8, 0, 0, 0],
      [0, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 6, 0, 1, 0, 3],
      [0, 5, 0, 0, 0, 0, 0, 4, 6],
      [0, 0, 0, 0, 1, 0, 0, 5, 0]
    ]
  end

  def solved_board() do
    [
      [4, 3, 5, 2, 6, 9, 7, 8, 1],
      [6, 8, 2, 5, 7, 1, 4, 9, 3],
      [1, 9, 7, 8, 3, 4, 5, 6, 2],
      [8, 2, 6, 1, 9, 5, 3, 4, 7],
      [3, 7, 4, 6, 8, 2, 9, 1, 5],
      [9, 5, 1, 7, 4, 3, 6, 2, 8],
      [5, 1, 9, 3, 2, 6, 8, 7, 4],
      [2, 4, 8, 9, 5, 7, 1, 3, 6],
      [7, 6, 3, 4, 1, 8, 2, 5, 9]
    ]
  end

  def unsolvable_board() do
    [
      [0, 0, 9, 0, 2, 8, 7, 0, 0],
      [8, 0, 6, 0, 0, 4, 0, 0, 5],
      [0, 0, 3, 0, 0, 0, 0, 0, 4],
      [6, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 2, 0, 7, 1, 3, 4, 5, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 2],
      [3, 0, 0, 0, 0, 0, 5, 0, 0],
      [9, 0, 0, 4, 0, 0, 8, 0, 7],
      [0, 0, 1, 2, 5, 0, 3, 0, 0]
    ]
  end

  def insufficient_givens() do
    # need 17 starting values
    [
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 5, 0, 0, 0, 0, 9, 0],
      [0, 0, 4, 0, 0, 0, 0, 1, 0],
      [2, 0, 0, 0, 0, 3, 0, 5, 0],
      [0, 0, 0, 7, 0, 0, 0, 0, 0],
      [4, 3, 8, 0, 0, 0, 2, 0, 0],
      [0, 0, 0, 0, 9, 0, 0, 0, 0],
      [0, 1, 0, 4, 0, 0, 0, 6, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
  end

  def duplicate_given_box() do
    # cannot be solved because duplicate 5 in box
    [
      [0, 0, 9, 0, 7, 0, 0, 0, 5],
      [0, 0, 2, 1, 0, 0, 9, 0, 0],
      [1, 0, 0, 0, 2, 8, 0, 0, 0],
      [0, 7, 0, 0, 0, 5, 0, 0, 1],
      [0, 0, 8, 5, 1, 0, 0, 0, 0],
      [0, 5, 0, 0, 0, 0, 3, 0, 0],
      [0, 0, 0, 0, 0, 3, 0, 0, 6],
      [8, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 1, 0, 0, 0, 0, 0, 8, 7]
    ]
  end

  def duplicate_given_column() do
    [
      [6, 0, 1, 5, 9, 0, 0, 0, 0],
      [0, 9, 0, 0, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 4],
      [0, 7, 0, 3, 1, 4, 0, 0, 6],
      [0, 2, 4, 0, 0, 0, 0, 0, 5],
      [0, 0, 3, 0, 0, 0, 0, 1, 0],
      [0, 0, 6, 0, 0, 0, 0, 0, 3],
      [0, 0, 0, 9, 0, 2, 0, 4, 0],
      [0, 0, 0, 0, 0, 1, 6, 0, 0]
    ]
  end

  def duplicate_given_row() do
    [
      [0, 4, 0, 1, 0, 0, 3, 5, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 2, 0, 5, 0, 0, 0],
      [0, 0, 0, 4, 0, 8, 9, 0, 0],
      [2, 6, 0, 0, 0, 0, 0, 1, 2],
      [0, 5, 0, 3, 0, 0, 0, 0, 7],
      [0, 0, 4, 0, 0, 0, 1, 6, 0],
      [6, 0, 0, 0, 0, 7, 0, 0, 0],
      [0, 1, 0, 0, 8, 0, 0, 2, 0]
    ]
  end

  def finished_unsolved() do
    [
      [4, 3, 5, 2, 6, 9, 7, 8, 1],
      [6, 8, 2, 5, 7, 1, 4, 9, 3],
      [1, 9, 7, 8, 3, 4, 5, 6, 2],
      [8, 2, 6, 1, 9, 5, 3, 4, 7],
      [3, 7, 4, 6, 8, 2, 9, 1, 5],
      [9, 5, 1, 7, 4, 3, 6, 2, 8],
      [5, 1, 9, 3, 2, 6, 8, 7, 4],
      [2, 4, 8, 6, 5, 7, 1, 3, 9],
      [7, 6, 3, 4, 1, 8, 2, 5, 9]
    ]
  end
end
